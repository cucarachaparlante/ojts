import streamlit as st

# ---------------------- Estilo personalizado ----------------------
st.markdown("""
    <style>
        body {
            background-color: #f7f9fb;
            color: #333;
        }
        .title-container {
            text-align: center;
            padding: 2rem 0 0 0;
        }
        .title-text {
            font-size: 3em;
            font-weight: bold;
            color: #205375;
        }
        .subtitle-text {
            font-size: 1.5em;
            color: #41729F;
        }
        .highlight-box {
            background-color: #eaf2fb;
            padding: 1rem;
            border-radius: 10px;
            margin: 2rem 0;
            box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        }
    </style>
""", unsafe_allow_html=True)

# ---------------------- T√≠tulo ----------------------
st.markdown("""
    <div class="title-container">
        <div class="title-text">üöÄ Explorador de M√©todos de Optimizaci√≥n</div>
        <div class="subtitle-text">Visualiza, analiza y comprende los algoritmos fundamentales</div>
    </div>
""", unsafe_allow_html=True)

# ---------------------- Secci√≥n destacada ----------------------
st.markdown("""
<div class="highlight-box">
    <h3>üîé ¬øQu√© es esta aplicaci√≥n?</h3>
    <p>Este proyecto te ofrece una forma interactiva de estudiar m√©todos de optimizaci√≥n cl√°sicos y modernos.
    Est√° dise√±ado especialmente para estudiantes de ingenier√≠a, matem√°ticas aplicadas e inteligencia artificial.</p>
</div>
""", unsafe_allow_html=True)
st.markdown("""
<p>üìå A lo largo de las p√°ginas podr√°s:</p>
<ul>
    <li>Visualizar paso a paso c√≥mo se comporta cada m√©todo</li>
    <li>Ajustar par√°metros y observar el efecto en tiempo real</li>
    <li>Comparar funciones objetivo con diferentes dificultades</li>
</ul>
""", unsafe_allow_html=True)

# ---------------------- Filosof√≠a del proyecto ----------------------
st.markdown("## üéØ Filosof√≠a del proyecto")
st.info("""
Esta plataforma naci√≥ del deseo de hacer m√°s accesible el aprendizaje de algoritmos matem√°ticos. 
Cada m√©todo aqu√≠ presentado no es solo un bloque de c√≥digo, sino una historia visual de c√≥mo resolver problemas reales.
""")

# ---------------------- Caracter√≠sticas ----------------------
st.markdown("## üîß Funcionalidades principales")
st.success("""
‚úÖ Interfaz limpia y accesible  
‚úÖ Par√°metros configurables  
‚úÖ Gr√°ficos en tiempo real  
‚úÖ Ideal para estudiantes y profesores  
‚úÖ Basado en Python y Streamlit
""")

# ---------------------- Cr√©ditos ----------------------
st.markdown("## üë• Cr√©ditos")
st.write("""
**Autor:** Carlos Einar Vida√±a Huesca [Proyecto de Optimizaci√≥n]  \n
**Universidad:** Universidad de Xalapa \n
**A√±o:** 2025  
""")

# ---------------------- Sidebar ----------------------
with st.sidebar:
    st.header("üß≠ Navegaci√≥n") 
    st.page_link("pages/1Busqueda_exhaustiva.py", label="üîç B√∫squeda Exhaustiva")
    st.page_link("pages/2FaseDeAcotamiento.py", label="üìè Fase de Acotamiento")
    st.page_link("pages/3Intervalos_Mitad.py", label="‚úÇÔ∏è Intervalos por la mitad")
    st.page_link("pages/4Fibonacci.py", label="üî¢ Fibonacci")
    st.page_link("pages/5Busqueda_dorada.py", label="üåü B√∫squeda Dorada")
    st.page_link("pages/6Newton_Raphson.py", label="üìâ Newton-Raphson")
    st.page_link("pages/7Biseccion.py", label="ü™ì Bisecci√≥n")
    st.page_link("pages/8Secante.py", label="‚ûó Secante")


import math
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st



def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54/x)

def funcion_1(x: float) -> float:
    return x**3 + 2*x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3*x**4 - 8*x**3 - 6*x**2 + 12*x


def fase_acotamiento(x0, delta, lambda_, funcion, max_iter=1000, max_x=1e6):
    x1 = x0
    x2 = x1 + delta if funcion(x1 + delta) < funcion(x1) else x1 - delta
    k = 1
    
    valores_x = [x1, x2]
    valores_y = [funcion(x1), funcion(x2)]
    
    while funcion(x2) < funcion(x1):
        if abs(x2) > max_x or k > max_iter:
            st.warning("Se alcanz√≥ el l√≠mite de iteraciones o crecimiento.")
            break
        
        x1 = x2
        delta *= lambda_
        x2 = x1 + delta if x2 > x0 else x1 - delta
        valores_x.append(x2)
        valores_y.append(funcion(x2))
        k += 1

    #fig, ax = plt.subplots()
    #ax.plot(valores_x, valores_y, 'bo-', label='Evaluaciones')
    #ax.set_xlabel('x')
    #ax.set_ylabel('f(x)')
    #ax.set_title('Fase de Acotamiento')
    #ax.legend()
    #st.pyplot(fig)

    return min(x1, x2), max(x1, x2)

st.title("Fase de acotamiento ü§ñ")
st.markdown("""
El m√©todo de fase de acotamiento se utiliza para acotar el m√≠nimo de una funci√≥n. 
Este m√©todo garantiza acotar el m√≠nimo de una funci√≥n unimodal. 
El algoritmo comienza con una suposici√≥n inicial y luego encuentra una direcci√≥n de
b√∫squeda basada en dos evaluaciones m√°s de la funci√≥n en las proximidades de la suposici√≥n inicial.
Posteriormente, se adopta una estrategia de b√∫squeda exponencial para alcanzar el √≥ptimo.\n 
Puedes ajustar el punto inicial, la delta, lambda y elegir la funci√≥n a optimizar.
""")

funciones = {
    "x¬≤ + 3": funcion_00,
    "Lata (√°rea)": lata,
    "Caja (volumen negativo)": caja,
    "x¬≤ + 54/x": funcion_0,
    "x¬≥ + 2x - 3": funcion_1,
    "x‚Å¥ + x¬≤ - 33": funcion_2,
    "3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": funcion_3,
    "Funci√≥n Personalizada": None
}

opcion = st.selectbox("**Selecciona la funci√≥n**", list(funciones.keys()))

if opcion == "Funci√≥n Personalizada":
    expresion = st.text_input("Escribe tu funci√≥n en t√©rminos de x (ej. x**2 + 3*x - 1):", value="x**2")
    try:
        funcion_seleccionada = lambda x: eval(expresion, {"x": x, "math": math, "np": np})
        st.success("Funci√≥n personalizada cargada correctamente.")
    except Exception as e:
        st.error(f"Error al interpretar la funci√≥n: {e}")
        funcion_seleccionada = None
else:
    funcion_seleccionada = funciones[opcion]

x0 = st.number_input("Punto inicial (x‚ÇÄ)", value=1.0)
delta = st.number_input("Delta inicial (Œî)", value=0.01, min_value=0.0001)
lambda_ = st.number_input("Lambda (Œª)", value=2.0, min_value=1.01)


if st.button("Ejecutar fase de acotamiento"):
    intervalo = fase_acotamiento(x0, delta, lambda_, funcion_seleccionada)
    st.success(f"Intervalo encontrado: [{intervalo[0]:.4f}, {intervalo[1]:.4f}]")

