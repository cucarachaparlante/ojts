import streamlit as st

st.title("游늷 B칰squeda Unidireccional")

st.markdown("""
<style>
.justify {
    text-align: justify;
    font-size: 16px;
    line-height: 1.7em;
    color: #333333;
}
</style>

<div class="justify">
<p>
La <strong>b칰squeda unidireccional</strong> es una t칠cnica utilizada para optimizar funciones que dependen de varias variables, pero enfoc치ndose 칰nicamente en una direcci칩n espec칤fica. En lugar de explorar todas las variables al mismo tiempo, este m칠todo reduce el problema a buscar el mejor valor a lo largo de una sola l칤nea o camino determinado..
</p>

<p>
El proceso inicia en un punto dentro del espacio de b칰squeda y se define una direcci칩n a seguir. Luego, se analiza c칩mo cambia la funci칩n objetivo al moverse en esa direcci칩n, buscando encontrar el punto que minimice o maximice el valor de la funci칩n.
</p>

<p>
Este enfoque es muy 칰til porque simplifica problemas complejos en uno m치s manejable, y suele emplearse como paso dentro de m칠todos de optimizaci칩n m치s avanzados, como el descenso por gradiente o algoritmos basados en Newton.
</p>

<p>
A continuaci칩n, se muestra una implementaci칩n sencilla que ejemplifica c칩mo funciona la b칰squeda unidireccional en una funci칩n de prueba.
</p>
</div>
""", unsafe_allow_html=True)


import numpy as np
import matplotlib.pyplot as plt

st.subheader("游빍 Ejemplo interactivo")

def funcion(x):
    return (x - 2)**2 + 1  

a = st.number_input("L칤mite inferior (a)", value=0.0)
b = st.number_input("L칤mite superior (b)", value=5.0)
epsilon = st.number_input("Precisi칩n (풧)", value=0.01)

def busqueda_unidireccional(f, a, b, epsilon):
    puntos = []
    while abs(b - a) > epsilon:
        x1 = a + (b - a) / 3
        x2 = b - (b - a) / 3
        f1 = f(x1)
        f2 = f(x2)
        puntos.append((x1, f1))
        puntos.append((x2, f2))

        if f1 < f2:
            b = x2
        else:
            a = x1

    x_opt = (a + b) / 2
    return x_opt, f(x_opt), puntos

if st.button("郊윒잺 Ejecutar b칰squeda"):
    x_opt, f_opt, puntos = busqueda_unidireccional(funcion, a, b, epsilon)
    st.success(f"M칤nimo aproximado: x = {x_opt:.4f}, f(x) = {f_opt:.4f}")

    x_vals = np.linspace(a - 1, b + 1, 400)
    y_vals = funcion(x_vals)
    fig, ax = plt.subplots()
    ax.plot(x_vals, y_vals, label='Funci칩n')
    if puntos:
        px, py = zip(*puntos)
        ax.scatter(px, py, color='red', s=30, label='Puntos evaluados')
    ax.axvline(x_opt, color='green', linestyle='--', label='칍ptimo')
    ax.set_title("B칰squeda unidireccional")
    ax.set_xlabel("x")
    ax.set_ylabel("f(x)")
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)
