import math
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

# --- FUNCIONES DISPONIBLES ---

def funcion_00(x: float) -> float:
    return x**2 + 3

def lata(r: float) -> float:
    return 2 * math.pi * r * r + (500 / r)

def caja(l: float) -> float:
    return -(4 * pow(l, 3) - 60 * l * l + 200 * l)

def funcion_0(x: float) -> float:
    return float('inf') if x == 0 else x**2 + (54 / x)

def funcion_1(x: float) -> float:
    return x**3 + 2 * x - 3

def funcion_2(x: float) -> float:
    return x**4 + x**2 - 33

def funcion_3(x: float) -> float:
    return 3 * x**4 - 8 * x**3 - 6 * x**2 + 12 * x

# --- FASE DE ACOTAMIENTO ---

def fase_acotamiento(x0, delta, lambda_, funcion, max_iter=1000, max_x=1e6):
    x1 = x0
    x2 = x1 + delta if funcion(x1 + delta) < funcion(x1) else x1 - delta
    k = 1

    valores_x = [x1, x2]
    valores_y = [funcion(x1), funcion(x2)]

    while funcion(x2) < funcion(x1):
        if abs(x2) > max_x or k > max_iter:
            st.warning("Se alcanz√≥ el l√≠mite de iteraciones o crecimiento.")
            break

        x1 = x2
        delta *= lambda_
        x2 = x1 + delta if x2 > x0 else x1 - delta
        valores_x.append(x2)
        valores_y.append(funcion(x2))
        k += 1

    return min(x1, x2), max(x1, x2)

# --- INTERFAZ STREAMLIT ---
def main():
    st.title("Fase de acotamiento ü§ñ")
    st.markdown("""
    El m√©todo de fase de acotamiento se utiliza para acotar el m√≠nimo de una funci√≥n. 
    Este m√©todo garantiza acotar el m√≠nimo de una funci√≥n unimodal. 
    El algoritmo comienza con una suposici√≥n inicial y luego encuentra una direcci√≥n de
    b√∫squeda basada en dos evaluaciones m√°s de la funci√≥n en las proximidades de la suposici√≥n inicial.
    Posteriormente, se adopta una estrategia de b√∫squeda exponencial para alcanzar el √≥ptimo.\n 
    Puedes ajustar el punto inicial, la delta, lambda y elegir la funci√≥n a optimizar.
    """)

    funciones = {
        "x¬≤ + 3": funcion_00,
        "Lata (√°rea)": lata,
        "Caja (volumen negativo)": caja,
        "x¬≤ + 54/x": funcion_0,
        "x¬≥ + 2x - 3": funcion_1,
        "x‚Å¥ + x¬≤ - 33": funcion_2,
        "3x‚Å¥ - 8x¬≥ - 6x¬≤ + 12x": funcion_3,
        "Funci√≥n Personalizada": None
    }

    opcion = st.selectbox("**Selecciona la funci√≥n**", list(funciones.keys()))

    if opcion == "Funci√≥n Personalizada":
        expresion = st.text_input("Escribe tu funci√≥n en t√©rminos de x (ej. x**2 + 3*x - 1):", value="x**2")
        try:
            funcion_seleccionada = lambda x: eval(expresion, {"x": x, "math": math, "np": np})
            st.success("Funci√≥n personalizada cargada correctamente.")
        except Exception as e:
            st.error(f"Error al interpretar la funci√≥n: {e}")
            funcion_seleccionada = None
    else:
        funcion_seleccionada = funciones[opcion]

    x0 = st.number_input("Punto inicial (x‚ÇÄ)", value=1.0)
    delta = st.number_input("Delta inicial (Œî)", value=0.01, min_value=0.0001)
    lambda_ = st.number_input("Lambda (Œª)", value=2.0, min_value=1.01)

    if st.button("Ejecutar fase de acotamiento") and funcion_seleccionada:
        intervalo = fase_acotamiento(x0, delta, lambda_, funcion_seleccionada)
        st.success(f"Intervalo encontrado: [{intervalo[0]:.4f}, {intervalo[1]:.4f}]")

        # Mostrar gr√°fica de evoluci√≥n
        x_vals = np.linspace(intervalo[0], intervalo[1], 100)
        y_vals = [funcion_seleccionada(x) for x in x_vals]
        fig, ax = plt.subplots()
        ax.plot(x_vals, y_vals, label="f(x)")
        ax.set_xlabel("x")
        ax.set_ylabel("f(x)")
        ax.set_title("Evaluaci√≥n de la funci√≥n en el intervalo acotado")
        ax.grid(True)
        st.pyplot(fig)

# --- SOLO EJECUTA LA INTERFAZ SI SE LLAMA DIRECTAMENTE ---
if __name__ == "__main__":
    main()
